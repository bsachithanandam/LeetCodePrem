\*

Description:

Given an integer array nums, reorder it such that nums[0] <= nums[1] >= nums[2] <= nums[3]....
You may assume the input array always has a valid answer.

Examples:

Example 1:
Input: nums = [3,5,2,1,6,4]
Output: [3,5,1,6,2,4]
Explanation: [1,6,2,5,3,4] is also accepted.
Example 2:
Input: nums = [6,6,5,6,3,8]
Output: [6,6,5,6,3,8]

Constraints:

1 <= nums.length <= 5 * 104
0 <= nums[i] <= 104
It is guaranteed that there will be an answer for the given input nums.

Solution : C++

Time Complexity : O(n)

Space Complexity : O(1)

*/

class Solution {
public:
    void swap(vector<int>& nums,int i,int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    void wiggleSort(vector<int>& nums) {
        for(int i=0;i<nums.size()-1;i++){
            if(i%2==0){
                if(!(nums[i] <= nums[i+1])){
                    swap(nums,i,i+1);
                }
            }
            else{
                if(!(nums[i]>=nums[i+1])){
                    swap(nums,i,i+1);
                }
            }
        }
    }
};
